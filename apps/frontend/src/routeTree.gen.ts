/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app/route'
import { Route as AppIndexImport } from './routes/_app/index'
import { Route as AuthSignupImport } from './routes/auth/signup'
import { Route as AuthSigninImport } from './routes/auth/signin'
import { Route as AppCommunityImport } from './routes/_app/community'
import { Route as AppGamesIndexImport } from './routes/_app/games/index'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AuthSignupRoute = AuthSignupImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const AuthSigninRoute = AuthSigninImport.update({
  id: '/auth/signin',
  path: '/auth/signin',
  getParentRoute: () => rootRoute,
} as any)

const AppCommunityRoute = AppCommunityImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppGamesIndexRoute = AppGamesIndexImport.update({
  id: '/games/',
  path: '/games/',
  getParentRoute: () => AppRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/_app/community': {
      id: '/_app/community'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof AppCommunityImport
      parentRoute: typeof AppRouteImport
    }
    '/auth/signin': {
      id: '/auth/signin'
      path: '/auth/signin'
      fullPath: '/auth/signin'
      preLoaderRoute: typeof AuthSigninImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupImport
      parentRoute: typeof rootRoute
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
    '/_app/games/': {
      id: '/_app/games/'
      path: '/games'
      fullPath: '/games'
      preLoaderRoute: typeof AppGamesIndexImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppCommunityRoute: typeof AppCommunityRoute
  AppIndexRoute: typeof AppIndexRoute
  AppGamesIndexRoute: typeof AppGamesIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppCommunityRoute: AppCommunityRoute,
  AppIndexRoute: AppIndexRoute,
  AppGamesIndexRoute: AppGamesIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AppRouteRouteWithChildren
  '/community': typeof AppCommunityRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/': typeof AppIndexRoute
  '/games': typeof AppGamesIndexRoute
}

export interface FileRoutesByTo {
  '/community': typeof AppCommunityRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/': typeof AppIndexRoute
  '/games': typeof AppGamesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteRouteWithChildren
  '/_app/community': typeof AppCommunityRoute
  '/auth/signin': typeof AuthSigninRoute
  '/auth/signup': typeof AuthSignupRoute
  '/_app/': typeof AppIndexRoute
  '/_app/games/': typeof AppGamesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/community'
    | '/auth/signin'
    | '/auth/signup'
    | '/'
    | '/games'
  fileRoutesByTo: FileRoutesByTo
  to: '/community' | '/auth/signin' | '/auth/signup' | '/' | '/games'
  id:
    | '__root__'
    | '/_app'
    | '/_app/community'
    | '/auth/signin'
    | '/auth/signup'
    | '/_app/'
    | '/_app/games/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
  AuthSigninRoute: typeof AuthSigninRoute
  AuthSignupRoute: typeof AuthSignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
  AuthSigninRoute: AuthSigninRoute,
  AuthSignupRoute: AuthSignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/auth/signin",
        "/auth/signup"
      ]
    },
    "/_app": {
      "filePath": "_app/route.tsx",
      "children": [
        "/_app/community",
        "/_app/",
        "/_app/games/"
      ]
    },
    "/_app/community": {
      "filePath": "_app/community.tsx",
      "parent": "/_app"
    },
    "/auth/signin": {
      "filePath": "auth/signin.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup.tsx"
    },
    "/_app/": {
      "filePath": "_app/index.tsx",
      "parent": "/_app"
    },
    "/_app/games/": {
      "filePath": "_app/games/index.tsx",
      "parent": "/_app"
    }
  }
}
ROUTE_MANIFEST_END */
